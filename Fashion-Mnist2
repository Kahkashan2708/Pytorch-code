{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9243,"sourceType":"datasetVersion","datasetId":2243}],"dockerImageVersionId":31154,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kahkashanmanzoor/fashion-mnist2?scriptVersionId=271347773\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:40:41.008474Z","iopub.execute_input":"2025-10-27T17:40:41.009158Z","iopub.status.idle":"2025-10-27T17:40:41.361947Z","shell.execute_reply.started":"2025-10-27T17:40:41.009124Z","shell.execute_reply":"2025-10-27T17:40:41.361294Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/fashionmnist/t10k-labels-idx1-ubyte\n/kaggle/input/fashionmnist/t10k-images-idx3-ubyte\n/kaggle/input/fashionmnist/fashion-mnist_test.csv\n/kaggle/input/fashionmnist/fashion-mnist_train.csv\n/kaggle/input/fashionmnist/train-labels-idx1-ubyte\n/kaggle/input/fashionmnist/train-images-idx3-ubyte\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:59:12.286504Z","iopub.execute_input":"2025-10-27T17:59:12.287094Z","iopub.status.idle":"2025-10-27T17:59:12.291075Z","shell.execute_reply.started":"2025-10-27T17:59:12.287073Z","shell.execute_reply":"2025-10-27T17:59:12.290443Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# Set random seeds for reproducibility\ntorch.manual_seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:59:13.357607Z","iopub.execute_input":"2025-10-27T17:59:13.358297Z","iopub.status.idle":"2025-10-27T17:59:13.370807Z","shell.execute_reply.started":"2025-10-27T17:59:13.358273Z","shell.execute_reply":"2025-10-27T17:59:13.370026Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"<torch._C.Generator at 0x7dd5d0f34e50>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# Check for GPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Using device: {device}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:59:14.602685Z","iopub.execute_input":"2025-10-27T17:59:14.603359Z","iopub.status.idle":"2025-10-27T17:59:14.607533Z","shell.execute_reply.started":"2025-10-27T17:59:14.603335Z","shell.execute_reply":"2025-10-27T17:59:14.606898Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/fashionmnist/fashion-mnist_train.csv')\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:59:16.795161Z","iopub.execute_input":"2025-10-27T17:59:16.795966Z","iopub.status.idle":"2025-10-27T17:59:20.550615Z","shell.execute_reply.started":"2025-10-27T17:59:16.79594Z","shell.execute_reply":"2025-10-27T17:59:20.549879Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"   label  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n0      2       0       0       0       0       0       0       0       0   \n1      9       0       0       0       0       0       0       0       0   \n2      6       0       0       0       0       0       0       0       5   \n3      0       0       0       0       1       2       0       0       0   \n4      3       0       0       0       0       0       0       0       0   \n\n   pixel9  ...  pixel775  pixel776  pixel777  pixel778  pixel779  pixel780  \\\n0       0  ...         0         0         0         0         0         0   \n1       0  ...         0         0         0         0         0         0   \n2       0  ...         0         0         0        30        43         0   \n3       0  ...         3         0         0         0         0         1   \n4       0  ...         0         0         0         0         0         0   \n\n   pixel781  pixel782  pixel783  pixel784  \n0         0         0         0         0  \n1         0         0         0         0  \n2         0         0         0         0  \n3         0         0         0         0  \n4         0         0         0         0  \n\n[5 rows x 785 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>pixel9</th>\n      <th>...</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n      <th>pixel784</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30</td>\n      <td>43</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 785 columns</p>\n</div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:59:22.466286Z","iopub.execute_input":"2025-10-27T17:59:22.467005Z","iopub.status.idle":"2025-10-27T17:59:22.471747Z","shell.execute_reply.started":"2025-10-27T17:59:22.466983Z","shell.execute_reply":"2025-10-27T17:59:22.471095Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"(60000, 785)"},"metadata":{}}],"execution_count":31},{"cell_type":"markdown","source":"## Visualization","metadata":{}},{"cell_type":"code","source":"# Choose 16 random images\nindices = np.random.choice(len(df), 16, replace=False)\n\nfig, axes = plt.subplots(4, 4, figsize=(10, 10))\nfig.suptitle(\"Sample of 16 Images from Dataset\", fontsize=14, fontweight='bold')\n\nfor ax, idx in zip(axes.flat, indices):\n    img = df.iloc[idx, 1:].values.reshape(28, 28)\n\n    ax.imshow(img, cmap='gray')\n    ax.set_xticks([])  # Remove ticks\n    ax.set_yticks([])\n    \n    # Add label as a small title box\n    ax.set_title(f\"Label: {df.iloc[idx, 0]}\",\n                 fontsize=10,\n                 pad=4,\n                 bbox=dict(facecolor='green', alpha=0.7, edgecolor='black'))\n\n# Adjust spacing for better appearance\nplt.subplots_adjust(wspace=0.2, hspace=0.4)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T18:00:22.936798Z","iopub.execute_input":"2025-10-27T18:00:22.937117Z","iopub.status.idle":"2025-10-27T18:00:23.509981Z","shell.execute_reply.started":"2025-10-27T18:00:22.937088Z","shell.execute_reply":"2025-10-27T18:00:23.50913Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 16 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"# train test split\n\nX = df.iloc[:, 1:].values\ny = df.iloc[:, 0].values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:41:44.138976Z","iopub.execute_input":"2025-10-27T17:41:44.139559Z","iopub.status.idle":"2025-10-27T17:41:44.143455Z","shell.execute_reply.started":"2025-10-27T17:41:44.139538Z","shell.execute_reply":"2025-10-27T17:41:44.142627Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:41:53.386984Z","iopub.execute_input":"2025-10-27T17:41:53.387575Z","iopub.status.idle":"2025-10-27T17:41:53.937786Z","shell.execute_reply.started":"2025-10-27T17:41:53.387554Z","shell.execute_reply":"2025-10-27T17:41:53.936901Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Scaling\nX_train = X_train/255.0\nX_test = X_test/255.0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:42:04.197431Z","iopub.execute_input":"2025-10-27T17:42:04.19801Z","iopub.status.idle":"2025-10-27T17:42:04.354309Z","shell.execute_reply.started":"2025-10-27T17:42:04.197985Z","shell.execute_reply":"2025-10-27T17:42:04.353473Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"class CustomDataset(Dataset):\n\n  def __init__(self, features, labels):\n\n    # Convert to PyTorch tensors\n    self.features = torch.tensor(features, dtype=torch.float32)\n    self.labels = torch.tensor(labels, dtype=torch.long)\n\n  def __len__(self):\n    return len(self.features)\n\n  def __getitem__(self, index):\n    return self.features[index], self.labels[index]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:42:19.751511Z","iopub.execute_input":"2025-10-27T17:42:19.752261Z","iopub.status.idle":"2025-10-27T17:42:19.756666Z","shell.execute_reply.started":"2025-10-27T17:42:19.752235Z","shell.execute_reply":"2025-10-27T17:42:19.755858Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"train_dataset = CustomDataset(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:42:28.114548Z","iopub.execute_input":"2025-10-27T17:42:28.115208Z","iopub.status.idle":"2025-10-27T17:42:28.232272Z","shell.execute_reply.started":"2025-10-27T17:42:28.115184Z","shell.execute_reply":"2025-10-27T17:42:28.23162Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"test_dataset = CustomDataset(X_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:42:37.012904Z","iopub.execute_input":"2025-10-27T17:42:37.013382Z","iopub.status.idle":"2025-10-27T17:42:37.022976Z","shell.execute_reply.started":"2025-10-27T17:42:37.013357Z","shell.execute_reply":"2025-10-27T17:42:37.02205Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, pin_memory=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False, pin_memory=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:44:01.705006Z","iopub.execute_input":"2025-10-27T17:44:01.705319Z","iopub.status.idle":"2025-10-27T17:44:01.71206Z","shell.execute_reply.started":"2025-10-27T17:44:01.705292Z","shell.execute_reply":"2025-10-27T17:44:01.711256Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"len(train_loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:44:03.415374Z","iopub.execute_input":"2025-10-27T17:44:03.415961Z","iopub.status.idle":"2025-10-27T17:44:03.420559Z","shell.execute_reply.started":"2025-10-27T17:44:03.415937Z","shell.execute_reply":"2025-10-27T17:44:03.419956Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"1500"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"class MyNN(nn.Module):\n\n  def __init__(self, input_dim, output_dim, num_hidden_layers, neurons_per_layer, dropout_rate):\n\n    super().__init__()\n\n    layers = []\n\n    for i in range(num_hidden_layers):\n\n      layers.append(nn.Linear(input_dim, neurons_per_layer))\n      layers.append(nn.BatchNorm1d(neurons_per_layer))\n      layers.append(nn.ReLU())\n      layers.append(nn.Dropout(dropout_rate))\n      input_dim = neurons_per_layer\n\n    layers.append(nn.Linear(neurons_per_layer, output_dim))\n\n    self.model = nn.Sequential(*layers) # here '*' is used to unpack the list values\n\n  def forward(self, x):\n\n    return self.model(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:44:33.655469Z","iopub.execute_input":"2025-10-27T17:44:33.656522Z","iopub.status.idle":"2025-10-27T17:44:33.661575Z","shell.execute_reply.started":"2025-10-27T17:44:33.656487Z","shell.execute_reply":"2025-10-27T17:44:33.661006Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# objective function\ndef objective(trial):\n\n  # next hyperparameter values from the search space\n  num_hidden_layers = trial.suggest_int(\"num_hidden_layers\", 1, 5)\n  neurons_per_layer = trial.suggest_int(\"neurons_per_layer\", 8, 128, step=8)\n  epochs = trial.suggest_int(\"epochs\", 10, 50, step=10)\n  learning_rate = trial.suggest_float(\"learning_rate\", 1e-5, 1e-1, log=True)\n  dropout_rate = trial.suggest_float(\"dropout_rate\", 0.1, 0.5, step=0.1)\n  batch_size = trial.suggest_categorical(\"batch_size\", [16, 32, 64, 128])\n  optimizer_name = trial.suggest_categorical(\"optimizer\", ['Adam', 'SGD', 'RMSprop'])\n  weight_decay = trial.suggest_float(\"weight_decay\", 1e-5, 1e-3, log=True)\n\n  train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, pin_memory=True)\n  test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, pin_memory=True)\n\n  # model init\n  input_dim = 784\n  output_dim = 10\n\n  model = MyNN(input_dim, output_dim, num_hidden_layers, neurons_per_layer, dropout_rate)\n  model.to(device)\n\n  # optimizer selection\n  criterion = nn.CrossEntropyLoss()\n  optimizer = optim.SGD(model.parameters(), lr=0.1, weight_decay=1e-4)\n\n  if optimizer_name == 'Adam':\n    optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n  elif optimizer_name == 'SGD':\n    optim.SGD(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n  else:\n    optim.RMSprop(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n\n  # training loop\n\n  for epoch in range(epochs):\n\n    for batch_features, batch_labels in train_loader:\n\n      # move data to gpu\n      batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)\n\n      # forward pass\n      outputs = model(batch_features)\n\n      # calculate loss\n      loss = criterion(outputs, batch_labels)\n\n      # back pass\n      optimizer.zero_grad()\n      loss.backward()\n\n      # update grads\n      optimizer.step()\n\n\n  # evaluation\n  model.eval()\n  # evaluation on test data\n  total = 0\n  correct = 0\n\n  with torch.no_grad():\n\n    for batch_features, batch_labels in test_loader:\n\n      # move data to gpu\n      batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)\n      outputs = model(batch_features)\n      _, predicted = torch.max(outputs, 1)\n      total = total + batch_labels.shape[0]\n      correct = correct + (predicted == batch_labels).sum().item()\n    accuracy = correct/total\n\n  return accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:45:46.300968Z","iopub.execute_input":"2025-10-27T17:45:46.301698Z","iopub.status.idle":"2025-10-27T17:45:46.310868Z","shell.execute_reply.started":"2025-10-27T17:45:46.301645Z","shell.execute_reply":"2025-10-27T17:45:46.309957Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"! pip install optuna","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:46:18.651123Z","iopub.execute_input":"2025-10-27T17:46:18.651931Z","iopub.status.idle":"2025-10-27T17:46:24.20952Z","shell.execute_reply.started":"2025-10-27T17:46:18.651906Z","shell.execute_reply":"2025-10-27T17:46:24.208526Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: optuna in /usr/local/lib/python3.11/dist-packages (4.5.0)\nRequirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (1.16.5)\nRequirement already satisfied: colorlog in /usr/local/lib/python3.11/dist-packages (from optuna) (6.9.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from optuna) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (25.0)\nRequirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.41)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from optuna) (4.67.1)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna) (6.0.3)\nRequirement already satisfied: Mako in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (1.3.10)\nRequirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (4.15.0)\nRequirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.3)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->optuna) (2.4.1)\nRequirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.11/dist-packages (from Mako->alembic>=1.5.0->optuna) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->optuna) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->optuna) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->optuna) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->optuna) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->optuna) (2024.2.0)\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"import optuna\nstudy = optuna.create_study(direction='maximize')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:46:26.381769Z","iopub.execute_input":"2025-10-27T17:46:26.382055Z","iopub.status.idle":"2025-10-27T17:46:26.846294Z","shell.execute_reply.started":"2025-10-27T17:46:26.382032Z","shell.execute_reply":"2025-10-27T17:46:26.84556Z"}},"outputs":[{"name":"stderr","text":"[I 2025-10-27 17:46:26,843] A new study created in memory with name: no-name-6a5e56d5-9f67-421e-baf3-4e7c3348b9f7\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"study.optimize(objective, n_trials=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:46:39.657563Z","iopub.execute_input":"2025-10-27T17:46:39.658379Z","iopub.status.idle":"2025-10-27T17:58:32.701806Z","shell.execute_reply.started":"2025-10-27T17:46:39.658353Z","shell.execute_reply":"2025-10-27T17:58:32.701044Z"}},"outputs":[{"name":"stderr","text":"[I 2025-10-27 17:47:11,435] Trial 0 finished with value: 0.863 and parameters: {'num_hidden_layers': 1, 'neurons_per_layer': 104, 'epochs': 20, 'learning_rate': 0.001101037842504911, 'dropout_rate': 0.30000000000000004, 'batch_size': 64, 'optimizer': 'Adam', 'weight_decay': 0.00028131984699238224}. Best is trial 0 with value: 0.863.\n[I 2025-10-27 17:48:29,502] Trial 1 finished with value: 0.8825833333333334 and parameters: {'num_hidden_layers': 3, 'neurons_per_layer': 64, 'epochs': 40, 'learning_rate': 0.0014919182924424694, 'dropout_rate': 0.30000000000000004, 'batch_size': 64, 'optimizer': 'Adam', 'weight_decay': 8.528511560206052e-05}. Best is trial 1 with value: 0.8825833333333334.\n[I 2025-10-27 17:49:34,940] Trial 2 finished with value: 0.8851666666666667 and parameters: {'num_hidden_layers': 2, 'neurons_per_layer': 120, 'epochs': 40, 'learning_rate': 0.0002367762251318271, 'dropout_rate': 0.5, 'batch_size': 64, 'optimizer': 'SGD', 'weight_decay': 0.00021281373730138757}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:49:47,659] Trial 3 finished with value: 0.8671666666666666 and parameters: {'num_hidden_layers': 4, 'neurons_per_layer': 64, 'epochs': 10, 'learning_rate': 0.012770287972158807, 'dropout_rate': 0.2, 'batch_size': 128, 'optimizer': 'Adam', 'weight_decay': 0.0001276552008407881}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:50:16,856] Trial 4 finished with value: 0.8808333333333334 and parameters: {'num_hidden_layers': 2, 'neurons_per_layer': 128, 'epochs': 30, 'learning_rate': 1.1992935099864213e-05, 'dropout_rate': 0.5, 'batch_size': 128, 'optimizer': 'RMSprop', 'weight_decay': 1.0550642872535475e-05}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:50:39,215] Trial 5 finished with value: 0.7295833333333334 and parameters: {'num_hidden_layers': 3, 'neurons_per_layer': 16, 'epochs': 20, 'learning_rate': 0.015107561099832493, 'dropout_rate': 0.4, 'batch_size': 128, 'optimizer': 'RMSprop', 'weight_decay': 0.0006833967795279959}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:52:33,716] Trial 6 finished with value: 0.8808333333333334 and parameters: {'num_hidden_layers': 1, 'neurons_per_layer': 72, 'epochs': 50, 'learning_rate': 0.09915948762024097, 'dropout_rate': 0.4, 'batch_size': 32, 'optimizer': 'Adam', 'weight_decay': 8.81833747697663e-05}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:56:00,270] Trial 7 finished with value: 0.8753333333333333 and parameters: {'num_hidden_layers': 4, 'neurons_per_layer': 72, 'epochs': 50, 'learning_rate': 0.00014905292958728494, 'dropout_rate': 0.4, 'batch_size': 32, 'optimizer': 'SGD', 'weight_decay': 3.341165982703077e-05}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:57:12,952] Trial 8 finished with value: 0.8725833333333334 and parameters: {'num_hidden_layers': 5, 'neurons_per_layer': 56, 'epochs': 50, 'learning_rate': 0.00022482423544881793, 'dropout_rate': 0.1, 'batch_size': 128, 'optimizer': 'Adam', 'weight_decay': 0.0002467742364285506}. Best is trial 2 with value: 0.8851666666666667.\n[I 2025-10-27 17:58:32,698] Trial 9 finished with value: 0.88275 and parameters: {'num_hidden_layers': 3, 'neurons_per_layer': 96, 'epochs': 40, 'learning_rate': 0.00016000568142418372, 'dropout_rate': 0.4, 'batch_size': 64, 'optimizer': 'RMSprop', 'weight_decay': 0.00011467299263906803}. Best is trial 2 with value: 0.8851666666666667.\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"study.best_value","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:58:54.193471Z","iopub.execute_input":"2025-10-27T17:58:54.193985Z","iopub.status.idle":"2025-10-27T17:58:54.199244Z","shell.execute_reply.started":"2025-10-27T17:58:54.193964Z","shell.execute_reply":"2025-10-27T17:58:54.198617Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"0.8851666666666667"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"study.best_params","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T17:58:55.771328Z","iopub.execute_input":"2025-10-27T17:58:55.771957Z","iopub.status.idle":"2025-10-27T17:58:55.777135Z","shell.execute_reply.started":"2025-10-27T17:58:55.771933Z","shell.execute_reply":"2025-10-27T17:58:55.776352Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"{'num_hidden_layers': 2,\n 'neurons_per_layer': 120,\n 'epochs': 40,\n 'learning_rate': 0.0002367762251318271,\n 'dropout_rate': 0.5,\n 'batch_size': 64,\n 'optimizer': 'SGD',\n 'weight_decay': 0.00021281373730138757}"},"metadata":{}}],"execution_count":26}]}